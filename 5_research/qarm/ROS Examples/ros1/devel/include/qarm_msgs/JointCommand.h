// Generated by gencpp from file qarm_msgs/JointCommand.msg
// DO NOT EDIT!


#ifndef QARM_MSGS_MESSAGE_JOINTCOMMAND_H
#define QARM_MSGS_MESSAGE_JOINTCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qarm_msgs
{
template <class ContainerAllocator>
struct JointCommand_
{
  typedef JointCommand_<ContainerAllocator> Type;

  JointCommand_()
    : joint_command()  {
    }
  JointCommand_(const ContainerAllocator& _alloc)
    : joint_command(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_command_type;
  _joint_command_type joint_command;





  typedef boost::shared_ptr< ::qarm_msgs::JointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qarm_msgs::JointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommand_

typedef ::qarm_msgs::JointCommand_<std::allocator<void> > JointCommand;

typedef boost::shared_ptr< ::qarm_msgs::JointCommand > JointCommandPtr;
typedef boost::shared_ptr< ::qarm_msgs::JointCommand const> JointCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qarm_msgs::JointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qarm_msgs::JointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qarm_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::qarm_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return lhs.joint_command == rhs.joint_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qarm_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::qarm_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qarm_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec5e070dc87da308c7a805432c97fa9c";
  }

  static const char* value(const ::qarm_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec5e070dc87da308ULL;
  static const uint64_t static_value2 = 0xc7a805432c97fa9cULL;
};

template<class ContainerAllocator>
struct DataType< ::qarm_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qarm_msgs/JointCommand";
  }

  static const char* value(const ::qarm_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qarm_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# all values are in rad\n"
"\n"
"float64[] joint_command\n"
;
  }

  static const char* value(const ::qarm_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qarm_msgs::JointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qarm_msgs::JointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qarm_msgs::JointCommand_<ContainerAllocator>& v)
  {
    s << indent << "joint_command[]" << std::endl;
    for (size_t i = 0; i < v.joint_command.size(); ++i)
    {
      s << indent << "  joint_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_command[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QARM_MSGS_MESSAGE_JOINTCOMMAND_H
