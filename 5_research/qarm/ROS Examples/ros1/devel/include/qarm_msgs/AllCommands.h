// Generated by gencpp from file qarm_msgs/AllCommands.msg
// DO NOT EDIT!


#ifndef QARM_MSGS_MESSAGE_ALLCOMMANDS_H
#define QARM_MSGS_MESSAGE_ALLCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <qarm_msgs/JointCommand.h>
#include <qarm_msgs/GripperCommand.h>
#include <qarm_msgs/LEDCommand.h>

namespace qarm_msgs
{
template <class ContainerAllocator>
struct AllCommands_
{
  typedef AllCommands_<ContainerAllocator> Type;

  AllCommands_()
    : header()
    , jointcommand()
    , grippercommand()
    , ledcommand()  {
    }
  AllCommands_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , jointcommand(_alloc)
    , grippercommand(_alloc)
    , ledcommand(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::qarm_msgs::JointCommand_<ContainerAllocator>  _jointcommand_type;
  _jointcommand_type jointcommand;

   typedef  ::qarm_msgs::GripperCommand_<ContainerAllocator>  _grippercommand_type;
  _grippercommand_type grippercommand;

   typedef  ::qarm_msgs::LEDCommand_<ContainerAllocator>  _ledcommand_type;
  _ledcommand_type ledcommand;





  typedef boost::shared_ptr< ::qarm_msgs::AllCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qarm_msgs::AllCommands_<ContainerAllocator> const> ConstPtr;

}; // struct AllCommands_

typedef ::qarm_msgs::AllCommands_<std::allocator<void> > AllCommands;

typedef boost::shared_ptr< ::qarm_msgs::AllCommands > AllCommandsPtr;
typedef boost::shared_ptr< ::qarm_msgs::AllCommands const> AllCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qarm_msgs::AllCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qarm_msgs::AllCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qarm_msgs::AllCommands_<ContainerAllocator1> & lhs, const ::qarm_msgs::AllCommands_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.jointcommand == rhs.jointcommand &&
    lhs.grippercommand == rhs.grippercommand &&
    lhs.ledcommand == rhs.ledcommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qarm_msgs::AllCommands_<ContainerAllocator1> & lhs, const ::qarm_msgs::AllCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::AllCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::AllCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::AllCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::AllCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::AllCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::AllCommands_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qarm_msgs::AllCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0d189c98e3eb187f5c6801c66a284fe";
  }

  static const char* value(const ::qarm_msgs::AllCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0d189c98e3eb187ULL;
  static const uint64_t static_value2 = 0xf5c6801c66a284feULL;
};

template<class ContainerAllocator>
struct DataType< ::qarm_msgs::AllCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qarm_msgs/AllCommands";
  }

  static const char* value(const ::qarm_msgs::AllCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qarm_msgs::AllCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"std_msgs/Header header\n"
"\n"
"qarm_msgs/JointCommand jointcommand\n"
"qarm_msgs/GripperCommand grippercommand\n"
"qarm_msgs/LEDCommand ledcommand\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: qarm_msgs/JointCommand\n"
"\n"
"# all values are in rad\n"
"\n"
"float64[] joint_command\n"
"================================================================================\n"
"MSG: qarm_msgs/GripperCommand\n"
"\n"
"# Gripper 0 - 1\n"
"# O is fully open, 1 is fully closed\n"
"\n"
"float64 gripper_command\n"
"================================================================================\n"
"MSG: qarm_msgs/LEDCommand\n"
"\n"
"# RGB values are scaled from 0 - 255 to 0 - 1 in this msg\n"
"# so 0 is 0, 1 is 255, 0.5 is 127, etc\n"
"# It should be an arrary of three elements like [1, 0, 0]\n"
"\n"
"float64[] RGB\n"
;
  }

  static const char* value(const ::qarm_msgs::AllCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qarm_msgs::AllCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.jointcommand);
      stream.next(m.grippercommand);
      stream.next(m.ledcommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qarm_msgs::AllCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qarm_msgs::AllCommands_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "jointcommand: ";
    s << std::endl;
    Printer< ::qarm_msgs::JointCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.jointcommand);
    s << indent << "grippercommand: ";
    s << std::endl;
    Printer< ::qarm_msgs::GripperCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.grippercommand);
    s << indent << "ledcommand: ";
    s << std::endl;
    Printer< ::qarm_msgs::LEDCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.ledcommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QARM_MSGS_MESSAGE_ALLCOMMANDS_H
