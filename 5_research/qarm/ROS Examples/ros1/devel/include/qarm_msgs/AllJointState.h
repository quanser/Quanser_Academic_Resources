// Generated by gencpp from file qarm_msgs/AllJointState.msg
// DO NOT EDIT!


#ifndef QARM_MSGS_MESSAGE_ALLJOINTSTATE_H
#define QARM_MSGS_MESSAGE_ALLJOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace qarm_msgs
{
template <class ContainerAllocator>
struct AllJointState_
{
  typedef AllJointState_<ContainerAllocator> Type;

  AllJointState_()
    : header()
    , joint_names()
    , joint_currents()
    , joint_positions()
    , joint_speeds()
    , joint_pwms()
    , joint_temperatures()  {
    }
  AllJointState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , joint_currents(_alloc)
    , joint_positions(_alloc)
    , joint_speeds(_alloc)
    , joint_pwms(_alloc)
    , joint_temperatures(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_currents_type;
  _joint_currents_type joint_currents;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_positions_type;
  _joint_positions_type joint_positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_speeds_type;
  _joint_speeds_type joint_speeds;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_pwms_type;
  _joint_pwms_type joint_pwms;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_temperatures_type;
  _joint_temperatures_type joint_temperatures;





  typedef boost::shared_ptr< ::qarm_msgs::AllJointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qarm_msgs::AllJointState_<ContainerAllocator> const> ConstPtr;

}; // struct AllJointState_

typedef ::qarm_msgs::AllJointState_<std::allocator<void> > AllJointState;

typedef boost::shared_ptr< ::qarm_msgs::AllJointState > AllJointStatePtr;
typedef boost::shared_ptr< ::qarm_msgs::AllJointState const> AllJointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qarm_msgs::AllJointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qarm_msgs::AllJointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qarm_msgs::AllJointState_<ContainerAllocator1> & lhs, const ::qarm_msgs::AllJointState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.joint_currents == rhs.joint_currents &&
    lhs.joint_positions == rhs.joint_positions &&
    lhs.joint_speeds == rhs.joint_speeds &&
    lhs.joint_pwms == rhs.joint_pwms &&
    lhs.joint_temperatures == rhs.joint_temperatures;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qarm_msgs::AllJointState_<ContainerAllocator1> & lhs, const ::qarm_msgs::AllJointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::AllJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::AllJointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::AllJointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::AllJointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::AllJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::AllJointState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qarm_msgs::AllJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6bf3c011ce8da2c15205c6fc311e56e";
  }

  static const char* value(const ::qarm_msgs::AllJointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6bf3c011ce8da2cULL;
  static const uint64_t static_value2 = 0x15205c6fc311e56eULL;
};

template<class ContainerAllocator>
struct DataType< ::qarm_msgs::AllJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qarm_msgs/AllJointState";
  }

  static const char* value(const ::qarm_msgs::AllJointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qarm_msgs::AllJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"std_msgs/Header header\n"
"\n"
"# Name\n"
"string joint_names\n"
"\n"
"# JointCurrent\n"
"float64[] joint_currents\n"
"\n"
"# JointPosition (rad)\n"
"float64[] joint_positions\n"
"\n"
"# JointSpeed (rad/s)\n"
"float64[] joint_speeds\n"
"\n"
"# JointPWM\n"
"float64[] joint_pwms\n"
"\n"
"# JointTemperature\n"
"float64[] joint_temperatures\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::qarm_msgs::AllJointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qarm_msgs::AllJointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.joint_currents);
      stream.next(m.joint_positions);
      stream.next(m.joint_speeds);
      stream.next(m.joint_pwms);
      stream.next(m.joint_temperatures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllJointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qarm_msgs::AllJointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qarm_msgs::AllJointState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names);
    s << indent << "joint_currents[]" << std::endl;
    for (size_t i = 0; i < v.joint_currents.size(); ++i)
    {
      s << indent << "  joint_currents[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_currents[i]);
    }
    s << indent << "joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      s << indent << "  joint_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_positions[i]);
    }
    s << indent << "joint_speeds[]" << std::endl;
    for (size_t i = 0; i < v.joint_speeds.size(); ++i)
    {
      s << indent << "  joint_speeds[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_speeds[i]);
    }
    s << indent << "joint_pwms[]" << std::endl;
    for (size_t i = 0; i < v.joint_pwms.size(); ++i)
    {
      s << indent << "  joint_pwms[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_pwms[i]);
    }
    s << indent << "joint_temperatures[]" << std::endl;
    for (size_t i = 0; i < v.joint_temperatures.size(); ++i)
    {
      s << indent << "  joint_temperatures[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_temperatures[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QARM_MSGS_MESSAGE_ALLJOINTSTATE_H
