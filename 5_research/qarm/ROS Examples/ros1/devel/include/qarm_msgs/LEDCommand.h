// Generated by gencpp from file qarm_msgs/LEDCommand.msg
// DO NOT EDIT!


#ifndef QARM_MSGS_MESSAGE_LEDCOMMAND_H
#define QARM_MSGS_MESSAGE_LEDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qarm_msgs
{
template <class ContainerAllocator>
struct LEDCommand_
{
  typedef LEDCommand_<ContainerAllocator> Type;

  LEDCommand_()
    : RGB()  {
    }
  LEDCommand_(const ContainerAllocator& _alloc)
    : RGB(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RGB_type;
  _RGB_type RGB;





  typedef boost::shared_ptr< ::qarm_msgs::LEDCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qarm_msgs::LEDCommand_<ContainerAllocator> const> ConstPtr;

}; // struct LEDCommand_

typedef ::qarm_msgs::LEDCommand_<std::allocator<void> > LEDCommand;

typedef boost::shared_ptr< ::qarm_msgs::LEDCommand > LEDCommandPtr;
typedef boost::shared_ptr< ::qarm_msgs::LEDCommand const> LEDCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qarm_msgs::LEDCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qarm_msgs::LEDCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qarm_msgs::LEDCommand_<ContainerAllocator1> & lhs, const ::qarm_msgs::LEDCommand_<ContainerAllocator2> & rhs)
{
  return lhs.RGB == rhs.RGB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qarm_msgs::LEDCommand_<ContainerAllocator1> & lhs, const ::qarm_msgs::LEDCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qarm_msgs::LEDCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qarm_msgs::LEDCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qarm_msgs::LEDCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f723af9a2be20e93588f85bf623cd8b4";
  }

  static const char* value(const ::qarm_msgs::LEDCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf723af9a2be20e93ULL;
  static const uint64_t static_value2 = 0x588f85bf623cd8b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qarm_msgs/LEDCommand";
  }

  static const char* value(const ::qarm_msgs::LEDCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# RGB values are scaled from 0 - 255 to 0 - 1 in this msg\n"
"# so 0 is 0, 1 is 255, 0.5 is 127, etc\n"
"# It should be an arrary of three elements like [1, 0, 0]\n"
"\n"
"float64[] RGB\n"
;
  }

  static const char* value(const ::qarm_msgs::LEDCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RGB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qarm_msgs::LEDCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qarm_msgs::LEDCommand_<ContainerAllocator>& v)
  {
    s << indent << "RGB[]" << std::endl;
    for (size_t i = 0; i < v.RGB.size(); ++i)
    {
      s << indent << "  RGB[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RGB[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QARM_MSGS_MESSAGE_LEDCOMMAND_H
